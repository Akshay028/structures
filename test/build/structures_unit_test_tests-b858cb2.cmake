add_test( [==[New Node is a tail node]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[New Node is a tail node]==])
set_tests_properties( [==[New Node is a tail node]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Operator < test T]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Operator < test T]==])
set_tests_properties( [==[Operator < test T]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Operator < test F]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Operator < test F]==])
set_tests_properties( [==[Operator < test F]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Operator > test T]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Operator > test T]==])
set_tests_properties( [==[Operator > test T]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Operator > test F]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Operator > test F]==])
set_tests_properties( [==[Operator > test F]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Operator < type T test, T]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Operator < type T test\, T]==])
set_tests_properties( [==[Operator < type T test, T]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Operator < type T test, F]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Operator < type T test\, F]==])
set_tests_properties( [==[Operator < type T test, F]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Operator > type T test, T]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Operator > type T test\, T]==])
set_tests_properties( [==[Operator > type T test, T]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Operator > type T test, F]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Operator > type T test\, F]==])
set_tests_properties( [==[Operator > type T test, F]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Empty list has a size of 0]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Empty list has a size of 0]==])
set_tests_properties( [==[Empty list has a size of 0]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Inserting increments size]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Inserting increments size]==])
set_tests_properties( [==[Inserting increments size]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Deleting decrements size when size > 0]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Deleting decrements size when size > 0]==])
set_tests_properties( [==[Deleting decrements size when size > 0]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Default constructed List is Empty]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Default constructed List is Empty]==])
set_tests_properties( [==[Default constructed List is Empty]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Inserting one element makes the list not empty]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Inserting one element makes the list not empty]==])
set_tests_properties( [==[Inserting one element makes the list not empty]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Deleting a list with one element makes it empty]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Deleting a list with one element makes it empty]==])
set_tests_properties( [==[Deleting a list with one element makes it empty]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Find -readonly returns F if the value is not found]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Find -readonly returns F if the value is not found]==])
set_tests_properties( [==[Find -readonly returns F if the value is not found]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
add_test( [==[Find -readonly returns T if value is found]==] /home/acoville/Desktop/structures/test/build/structures_unit_test [==[Find -readonly returns T if value is found]==])
set_tests_properties( [==[Find -readonly returns T if value is found]==] PROPERTIES WORKING_DIRECTORY /home/acoville/Desktop/structures/test/build)
set( structures_unit_test_TESTS [==[New Node is a tail node]==] [==[Operator < test T]==] [==[Operator < test F]==] [==[Operator > test T]==] [==[Operator > test F]==] [==[Operator < type T test, T]==] [==[Operator < type T test, F]==] [==[Operator > type T test, T]==] [==[Operator > type T test, F]==] [==[Empty list has a size of 0]==] [==[Inserting increments size]==] [==[Deleting decrements size when size > 0]==] [==[Default constructed List is Empty]==] [==[Inserting one element makes the list not empty]==] [==[Deleting a list with one element makes it empty]==] [==[Find -readonly returns F if the value is not found]==] [==[Find -readonly returns T if value is found]==])
